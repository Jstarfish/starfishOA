package cls.pilottery.pos.system.service.impl;

import java.util.ArrayList;
import java.util.List;
import java.util.Map;

import org.apache.commons.lang3.StringUtils;
import org.apache.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;

import cls.pilottery.common.EnumConfigEN;
import cls.pilottery.common.utils.HttpClientUtils;
import cls.pilottery.common.utils.PropertiesUtil;
import cls.pilottery.pos.common.annotation.PosMethod;
import cls.pilottery.pos.common.annotation.PosService;
import cls.pilottery.pos.common.model.BaseRequest;
import cls.pilottery.pos.common.model.BaseResponse;
import cls.pilottery.pos.system.dao.BankTransDao;
import cls.pilottery.pos.system.model.bank.AgencyDigitalTranInfo;
import cls.pilottery.pos.system.model.bank.BankTopupRequest;
import cls.pilottery.pos.system.model.bank.BankTopupResponse;
import cls.pilottery.pos.system.model.bank.BankTypeResponse;
import cls.pilottery.pos.system.model.bank.BankWithdrawRequest;
import cls.pilottery.pos.system.model.bank.BankWithdrawResponse;
import cls.pilottery.pos.system.model.bank.OutletAccoutInfo;
import cls.pilottery.pos.system.model.bank.PayCenterQueryRequest;
import cls.pilottery.pos.system.model.bank.PayCenterQueryRespone;
import cls.pilottery.pos.system.model.bank.PayCenterTopupRequest;
import cls.pilottery.pos.system.model.bank.PayCenterTopupResponse;
import cls.pilottery.pos.system.service.BankService;
import cls.pilottery.web.outlet.service.OutletService;

import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONObject;

@PosService
public class BankServiceImpl implements BankService {

	public static Logger logger = Logger.getLogger(BankServiceImpl.class);

	//交易中心url
	public static String TransCenterUrl =PropertiesUtil.readValue("url_tran_center");
	
	@Autowired
	private OutletService outletService;
	
	@Autowired
	private BankTransDao bankDao;


	@Override
	@PosMethod(code = "030001")
	public BaseResponse getTopupType(Object reqParam) throws Exception {
		
		BaseResponse result = new BaseResponse();
		List<BankTypeResponse> list = new ArrayList<BankTypeResponse>();
		
		//目前没有选择语言，所以没有判断session，只从默认取英文
		if(EnumConfigEN.payTransTypes.size() > 0)
		{
			for (int key : EnumConfigEN.payTransTypes.keySet()) {
				BankTypeResponse bt1 = new BankTypeResponse();
				bt1.setTypeCode(key);
				bt1.setTypeName(EnumConfigEN.payTransTypes.get(key));
				list.add(bt1);
			}
		}
		result.setResult(list);
		return result;
	}

	@Override
	@PosMethod(code = "030002")
	public BaseResponse getOutletBankAccInfo(Object reqParam) throws Exception {
		BaseRequest request = (BaseRequest)reqParam;
		BaseResponse result = new BaseResponse();
		@SuppressWarnings("rawtypes")
		Map req = JSONObject.parseObject(request.getParam().toString(), Map.class);
		String outletCode = (String)req.get("outletCode");
		int accType = (Integer) req.get("typeCode");
		List<OutletAccoutInfo> infos =bankDao.getOutletPayType(outletCode, accType);
		result.setResult(infos);		
		return result;
	}

	
	@Override
	@PosMethod(code = "030003")
	public BaseResponse bankTopUp(Object reqParam) throws Exception {
		BaseRequest bq = (BaseRequest) reqParam;
		BaseResponse response = new BaseResponse();

		if (bq == null) {
			response.setErrcode(10012);
			logger.info("请求参数不合法或为空!");
			return response;
		}

		BankTopupRequest rqparam = new BankTopupRequest();
		rqparam = JSONObject.parseObject(bq.getParam().toString(),
				BankTopupRequest.class);
		
		//充值流程如下
		//首先：充值数字表，调用wing接口，如果成功插入充值成功记录，如果失败更新数字表
		//验证状态
		AgencyDigitalTranInfo dgInfo = bankDao.getOutletTranInfo(rqparam);
		if(dgInfo == null)
	    {
	    	response.setErrcode(10020);
	    	logger.info("充值失败：站点、账户不存在或者状态异常！");
			return response;
	    }
		
		dgInfo.setAmount(rqparam.getAmount());
		dgInfo.setTranType(1);//充值
		dgInfo.setStatus(1);//发起
		dgInfo.setReqJsonData(JSON.toJSONString(dgInfo));	
		
		//插入充值申请信息
		try
		{
			bankDao.insertTranLog(dgInfo);
		}catch (Exception e) {
			response.setErrcode(10500);
	    	logger.info("充值失败：插入申请信息异常，"+e.getMessage());	    	
			return response;
		}
		
		
		//调用接口	
		int errCode=-1;
		PayCenterTopupRequest req = new PayCenterTopupRequest();
		req.setMessageCode("1001");
		String hostUrl = TransCenterUrl;
		
        String hjson = JSONObject.toJSONString(req);
        logger.debug("向支付中心发送请求:" + hostUrl + "，请求内容："+hjson);

        String resJson = HttpClientUtils.postString(hostUrl, hjson);
        logger.debug("接收支付中心的响应，消息内容：" + resJson);
        
        if (resJson.contains("connectTimeOut")) {
        	
        	PayCenterQueryRequest qreq = new PayCenterQueryRequest();
        	qreq.setTranFlow(dgInfo.getTranFlow());
        	
        	hjson = JSONObject.toJSONString(qreq);
            logger.debug("向支付中心发送请求:" + hostUrl + "，请求内容："+hjson);

            resJson = HttpClientUtils.postString(hostUrl, hjson);
            logger.debug("接收支付中心的响应，消息内容：" + resJson);
            
            //如果超时不处理，不超时则解析返回信息
            if (!resJson.contains("connectTimeOut"))
            {
            	PayCenterQueryRespone resp = JSON.parseObject(resJson, PayCenterQueryRespone.class);
            	if(resp.getErrorCode().equals(""))//成功
            	{
            		errCode=0;
            		//赋值
            		//dgInfo.setBankFlow(bankFlow);
    				//dgInfo.setFee(fee);
            	}else
            	{
            		errCode=2;
            	}    
            }
                        
        }else
        {
        	PayCenterTopupResponse resp = JSON.parseObject(resJson, PayCenterTopupResponse.class);
        	if(resp.getErrorCode().equals(""))//成功
        	{
        		errCode=0;
        		//赋值
        		//dgInfo.setBankFlow(bankFlow);
				//dgInfo.setFee(fee);
        	}else
        	{
        		errCode=2;
        	}        	
        }
		
		
		try
		{
			dgInfo.setRepJsonData(resJson);
			switch(errCode)
			{
				case 0://成功
					bankDao.topupConfirm(dgInfo);
					logger.debug("p_outlet_topup执行完毕,errcode="+dgInfo.getErrCode());
					if(dgInfo.getErrCode() != 0){
						dgInfo.setStatus(4);
						throw new Exception(dgInfo.getErrMessage());
					}
					break;
				case 2://失败
					dgInfo.setStatus(3);
					throw new Exception("failure,for:");
				default://其他默认超时
					dgInfo.setStatus(4);
					throw new Exception("Time out");
			}
		
		}catch (Exception e) {
			
			dgInfo.setFailureReason(e.getMessage());
			bankDao.updataTranLog(dgInfo);
			logger.info("充值失败："+e.getMessage());
			response.setErrcode(10501);
			return response;
			
		}

		BankTopupResponse info = new BankTopupResponse();
		info.setBalance(dgInfo.getAfterAmout());
		info.setOutletCode(dgInfo.getAgencyCode());
		info.setOutletName("Outlet Name");
		info.setTopupAmount(dgInfo.getAmount());
		response.setResult(info);

		return response;
	}

	@Override
	@PosMethod(code = "030004")
	public BaseResponse bankWithdraw(Object reqParam) throws Exception {
		BaseRequest request = (BaseRequest)reqParam;
		BaseResponse response = new BaseResponse();
		
		BankWithdrawRequest req = JSONObject.parseObject(request.getParam().toString(), BankWithdrawRequest.class);
		 if(req == null || StringUtils.isEmpty(req.getAccountID()) || StringUtils.isEmpty(req.getOutletCode()) || req.getAmount() < 1 ){
			 response.setErrcode(10012);
			 return response;
		 }
		 BankWithdrawResponse result = new BankWithdrawResponse();
		 result.setWithdrawCode("test0000001");
		 response.setResult(result);
		return response;
	}
	
	
}
