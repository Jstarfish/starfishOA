package cls.taishan.web.dao;

import java.sql.CallableStatement;
import java.sql.SQLException;
import java.sql.Types;

import org.apache.log4j.Logger;
import org.springframework.dao.DataAccessException;
import org.springframework.http.HttpEntity;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpMethod;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.jdbc.core.CallableStatementCallback;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.web.client.RestClientException;
import org.springframework.web.client.RestTemplate;

import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONObject;

import cls.taishan.common.constants.SysConstants;
import cls.taishan.common.utils.PropertiesUtil;
import cls.taishan.web.model.WingEUserLoginInfo;

@SuppressWarnings({ "rawtypes", "unchecked" })
public class wingChargeDao {

	private static Logger logger = Logger.getLogger(wingChargeDao.class);

	private JdbcTemplate jdbcTemplate;
	private WingEUserLoginInfo winguser;
	private String token;
	public String eTradeFlow;
	private String ePostId;
	private String eOutPostId;
	private JSONObject reqJsonData = new JSONObject();
	private JSONObject resJsonData = new JSONObject();
	private int resHttpStatus;

	// RestFul Service
	private String URL;
	private RestTemplate restTemplate = new RestTemplate();
	private HttpHeaders headers = new HttpHeaders();
	private HttpStatus status;
	private HttpEntity<String> requestEntity;
	private ResponseEntity<String> responseEntity;

	private wingChargeInputDao in;

	// 错误枚举
	private static final int ERR_PROC_COMMIT_DATA = 201;
	private static final int ERR_PROC_COMMIT_ORACLE = 202;
	private static final int ERR_PROC_GET_ACC_LOGIN_NULL = 203;
	private static final int ERR_PROC_GET_ACC_LOGIN_ORACLE = 204;
	private static final int ERR_PROC_LOGIN_DATA = 205;
	private static final int ERR_PROC_LOGIN_ORACLE = 206;
	private static final int ERR_PROC_RECEIVE_DATA = 207;
	private static final int ERR_PROC_RECEIVE_DATA_ORACLE = 208;
	private static final int ERR_PROC_VALIDATE_DATA = 209;
	private static final int ERR_PROC_VALIDATE_ORACLE = 210;
	private static final int ERR_REST_COMMIT_CONNECTION = 211;
	private static final int ERR_REST_COMMIT_NOT_200 = 212;
	private static final int ERR_REST_COMMIT_TIMEOUT = 213;
	private static final int ERR_REST_LOGIN_CONNECTION = 214;
	private static final int ERR_REST_LOGIN_NOT_200 = 215;
	private static final int ERR_REST_LOGIN_TIMEOUT = 216;
	private static final int ERR_REST_VALIDATE_CONNECTION = 217;
	private static final int ERR_REST_VALIDATE_NOT_200 = 218;
	private static final int ERR_REST_VALIDATE_TIMEOUT = 219;

	public wingChargeDao(JdbcTemplate jdbcTemplate, wingChargeInputDao in) {
		super();
		// TODO Auto-generated constructor stub
		this.jdbcTemplate = jdbcTemplate;

		winguser = new WingEUserLoginInfo();
		winguser.setGrantType(PropertiesUtil.readValue("wing.grant_type"));
		winguser.setClientID(PropertiesUtil.readValue("wing.client_id"));
		winguser.setClientSecret(PropertiesUtil.readValue("wing.client_secret"));
		winguser.setScope(PropertiesUtil.readValue("wing.scope"));

		this.URL = PropertiesUtil.readValue("wing.url");

		this.in = in;

	}

	public int getEUserLogin() {
		try {
			String sql = "{? = call f_get_euser_acc_login(?)}";
			logger.info("execute " + sql);
			int errorcode = (int) jdbcTemplate.execute(sql, new CallableStatementCallback() {
				@Override
				public Object doInCallableStatement(CallableStatement cs) throws SQLException, DataAccessException {
					cs.setString(2, in.getAccount());
					logger.info("Parameter : [" + in.getAccount() + "]");

					cs.registerOutParameter(1, Types.VARCHAR);
					cs.execute();

					String rtv = cs.getString(1);
					logger.info("Return Parameter : [" + cs.getString(1) + "]");
					if (rtv == null)
						return ERR_PROC_GET_ACC_LOGIN_NULL;

					winguser.setWingUser(JSON.parseObject(rtv).getString("user"));
					winguser.setWingPass(JSON.parseObject(rtv).getString("pass"));
					winguser.setBillCode(JSON.parseObject(rtv).getString("billcode"));

					return 0;
				}
			});
			return errorcode;
		} catch (DataAccessException e) {
			logger.error("execute procedure f_get_euser_acc_login with oracle error: ", e);
			return ERR_PROC_GET_ACC_LOGIN_ORACLE;
		}
	}

	/**
	 * 接收报文（存储过程）
	 * 
	 * @param in
	 * @return
	 */
	public int receiveData() {
		try {
			String sql = "{call p_wing_receive_charge(?,?,?, ?,?,?, ?,?,?)}";
			logger.info("execute " + sql);
			int errorcode = (int) jdbcTemplate.execute(sql, new CallableStatementCallback() {
				@Override
				public Object doInCallableStatement(CallableStatement cs) throws SQLException, DataAccessException {
					cs.setString(1, in.geteUser());
					cs.setString(2, in.getAccount());
					cs.setLong(3, in.getAmount());
					cs.setString(4, in.getUserAcc());
					cs.setString(5, in.getOtp());
					cs.setString(6, in.getReqFlow());
					logger.info(String.format("In Parameter : [%s], [%s], [%s], [%s], [%s], [%s]", in.geteUser(),
							in.getAccount(), in.getAmount(), in.getUserAcc(), in.getOtp(), in.getReqFlow()));

					cs.registerOutParameter(7, Types.VARCHAR);
					cs.registerOutParameter(8, Types.NUMERIC);
					cs.registerOutParameter(9, Types.VARCHAR);
					cs.execute();
					int errorcode = cs.getInt(8);
					eTradeFlow = cs.getString(7);
					logger.info(String.format("Out Parameter : [%s], [%s], [%s]", cs.getString(7), cs.getString(8),
							cs.getString(9)));
					if (errorcode != 0) {
						logger.error("execute procedure p_wing_receive_charge: " + errorcode + ",errorMsg:"
								+ cs.getString(9));
					}
					return (errorcode == 0 ? 0 : ERR_PROC_RECEIVE_DATA);
				}
			});
			return errorcode;
		} catch (DataAccessException e) {
			logger.error("execute procedure p_wing_receive_charge with oracle error: ", e);
			return ERR_PROC_RECEIVE_DATA_ORACLE;
		}
	}

	// 登录
	public int login() {
		int rtv = 0;

		rtv = this.loginWingDB();
		if (rtv != 0)
			return rtv;

		rtv = this.loginWingRest();
		if (rtv != 0)
			return rtv;

		return rtv;
	}

	// 校验
	public int validate() {
		int rtv = 0;

		rtv = this.validateWingDB();
		if (rtv != 0)
			return rtv;

		rtv = this.validateWingRest();
		if (rtv != 0)
			return rtv;

		return rtv;

	}

	// 提交
	public int commit() {
		int rtv = 0;

		rtv = this.commitWingDB();
		if (rtv != 0)
			return rtv;

		rtv = this.commitWingRest();
		if (rtv != 0)
			return rtv;

		return rtv;

	}

	// 登录前记录（DB）
	private int loginWingDB() {
		int errorCode = 0;
		String errorMessage = "";

		int rtv = runLoginDBProc(eTradeFlow, winguser.toReqString(), SysConstants.WING_REST_TRADE_STATUS_POSTING, "", 0,
				errorCode, errorMessage);

		ePostId = eOutPostId;
		return rtv;

	}

	// 登录成功记录（DB）
	private int loginWingSuccDB() {
		int errorCode = 0;
		String errorMessage = "";

		return runLoginDBProc(eTradeFlow, resJsonData.toJSONString(), SysConstants.WING_REST_TRADE_STATUS_SUCC, ePostId,
				resHttpStatus, errorCode, errorMessage);

	}

	// 登录失败记录（DB）
	private int loginWingFailDB() {
		int errorCode = 0;
		String errorMessage = "";

		return runLoginDBProc(eTradeFlow, resJsonData.toJSONString(), SysConstants.WING_REST_TRADE_STATUS_FAIL, ePostId,
				resHttpStatus, errorCode, errorMessage);

	}

	// 登录超时记录（DB）
	private int loginWingTimeoutDB() {

		int errorCode = 0;
		String errorMessage = "";

		return runLoginDBProc(eTradeFlow, resJsonData.toJSONString(), SysConstants.WING_REST_TRADE_STATUS_TIMEOUT,
				ePostId, resHttpStatus, errorCode, errorMessage);
	}

	// 登录Wing（RestFUL）
	private int loginWingRest() {
		boolean timeout = false;
		int rtv;
		String url = this.URL + PropertiesUtil.readValue("wing.login_uri");

		headers.clear();
		headers.add("Content-Type", "application/x-www-form-urlencoded");

		requestEntity = new HttpEntity<String>(winguser.toReqString(), headers);

		logger.info("Wing URL is: " + url);

		try {
			responseEntity = restTemplate.exchange(url, HttpMethod.POST, requestEntity, String.class);
		} catch (RestClientException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();

			if (e.getMessage().contains("Connection timed out")) {
				timeout = true;
				logger.info("<loginWingRest> Connection timed out");
			} else {
				logger.info("<loginWingRest> other connection error.");
				return ERR_REST_LOGIN_CONNECTION;
			}

		}

		if (timeout) {
			rtv = loginWingTimeoutDB();
			if (rtv != 0)
				return rtv;
			return ERR_REST_LOGIN_TIMEOUT;
		}

		String body = responseEntity.getBody();
		status = responseEntity.getStatusCode();
		resHttpStatus = status.value();
		resJsonData = JSON.parseObject(body);

		if (resHttpStatus != 200) {
			rtv = loginWingFailDB();
			if (rtv != 0)
				return rtv;
			return ERR_REST_LOGIN_NOT_200;
		}

		rtv = loginWingSuccDB();
		if (rtv != 0)
			return rtv;
		token = resJsonData.getString("access_token");
		return 0;
	}

	// 校验前记录（DB）
	private int validateWingDB() {
		int errorCode = 0;
		String errorMessage = "";

		reqJsonData.clear();
		reqJsonData.put("wing_account", in.getUserAcc());
		reqJsonData.put("biller_code", winguser.getBillCode());
		reqJsonData.put("amount", in.getAmount());
		reqJsonData.put("consumer_id", in.getReqFlow());
		reqJsonData.put("security_code", in.getOtp());

		int rtv = runValidateDBProc(eTradeFlow, reqJsonData.toJSONString(), SysConstants.WING_REST_TRADE_STATUS_POSTING,
				"", 0, errorCode, errorMessage);

		ePostId = eOutPostId;
		return rtv;

	}

	// 校验成功记录（DB）
	private int validateWingSuccDB() {
		int errorCode = 0;
		String errorMessage = "";

		return runValidateDBProc(eTradeFlow, resJsonData.toJSONString(), SysConstants.WING_REST_TRADE_STATUS_SUCC,
				ePostId, resHttpStatus, errorCode, errorMessage);
	}

	// 校验失败记录（DB）
	private int validateWingFailDB() {
		int errorCode = 0;
		String errorMessage = "";

		return runValidateDBProc(eTradeFlow, resJsonData.toJSONString(), SysConstants.WING_REST_TRADE_STATUS_FAIL,
				ePostId, resHttpStatus, errorCode, errorMessage);
	}

	// 校验超时记录（DB）
	private int validateWingTimeoutDB() {
		int errorCode = 0;
		String errorMessage = "";

		return runValidateDBProc(eTradeFlow, resJsonData.toJSONString(), SysConstants.WING_REST_TRADE_STATUS_TIMEOUT,
				ePostId, resHttpStatus, errorCode, errorMessage);
	}

	// 校验Wing（RestFUL）
	private int validateWingRest() {
		boolean timeout = false;
		int rtv;
		String totalURL = "";

		headers.clear();
		headers.add("Content-Type", "application/json");
		headers.add("Authorization", "Bearer " + token);

		requestEntity = new HttpEntity<String>(reqJsonData.toJSONString(), headers);

		totalURL = this.URL + PropertiesUtil.readValue("wing.validate_uri");
		logger.info("Wing URL is: " + totalURL);

		try {
			responseEntity = restTemplate.exchange(totalURL, HttpMethod.POST, requestEntity, String.class);
		} catch (RestClientException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();

			if (e.getMessage().contains("Connection timed out")) {
				timeout = true;
				logger.info("<validateWingRest> Connection timed out");
			} else {
				logger.info("<validateWingRest> other connection error.");
				return ERR_REST_VALIDATE_CONNECTION;
			}

		}

		if (timeout) {
			rtv = validateWingTimeoutDB();
			if (rtv != 0)
				return rtv;
			return ERR_REST_VALIDATE_TIMEOUT;
		}

		String body = responseEntity.getBody();
		status = responseEntity.getStatusCode();
		resHttpStatus = status.value();
		resJsonData = JSON.parseObject(body);

		if (resHttpStatus != 200) {
			rtv = validateWingFailDB();
			if (rtv != 0)
				return rtv;
			return ERR_REST_VALIDATE_NOT_200;
		}

		rtv = validateWingSuccDB();
		if (rtv != 0)
			return rtv;

		return 0;
	}

	// 提交前记录（DB）
	private int commitWingDB() {
		int errorCode = 0;
		String errorMessage = "";

		int rtv = runCommitDBProc(eTradeFlow, "{}", SysConstants.WING_REST_TRADE_STATUS_POSTING, "", 0, errorCode,
				errorMessage);

		ePostId = eOutPostId;
		return rtv;

	}

	// 提交成功记录（DB）
	private int commitWingSuccDB() {
		int errorCode = 0;
		String errorMessage = "";

		return runCommitDBProc(eTradeFlow, resJsonData.toJSONString(), SysConstants.WING_REST_TRADE_STATUS_SUCC,
				ePostId, resHttpStatus, errorCode, errorMessage);
	}

	// 提交失败记录（DB）
	private int commitWingFailDB() {
		int errorCode = 0;
		String errorMessage = "";

		return runCommitDBProc(eTradeFlow, resJsonData.toJSONString(), SysConstants.WING_REST_TRADE_STATUS_FAIL,
				ePostId, resHttpStatus, errorCode, errorMessage);
	}

	// 提交超时记录（DB）
	private int commitWingTimeoutDB() {
		int errorCode = 0;
		String errorMessage = "";

		return runCommitDBProc(eTradeFlow, resJsonData.toJSONString(), SysConstants.WING_REST_TRADE_STATUS_TIMEOUT,
				ePostId, resHttpStatus, errorCode, errorMessage);
	}

	// 提交Wing（RestFUL）
	private int commitWingRest() {
		boolean timeout = false;
		int rtv;
		String totalURL = "";

		headers.clear();
		headers.add("Content-Type", "application/json");
		headers.add("Authorization", "Bearer " + token);

		requestEntity = new HttpEntity<String>("{}", headers);

		totalURL = this.URL + PropertiesUtil.readValue("wing.commit_uri");
		logger.info("Wing URL is: " + totalURL);

		try {
			responseEntity = restTemplate.exchange(totalURL, HttpMethod.POST, requestEntity, String.class);
		} catch (RestClientException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();

			if (e.getMessage().contains("Connection timed out")) {
				timeout = true;
				logger.info("<validateWingRest> Connection timed out");
			} else {
				logger.info("<validateWingRest> other connection error.");
				return ERR_REST_COMMIT_CONNECTION;
			}

		}

		if (timeout) {
			rtv = commitWingTimeoutDB();
			if (rtv != 0)
				return rtv;
			return ERR_REST_COMMIT_TIMEOUT;
		}

		String body = responseEntity.getBody();
		status = responseEntity.getStatusCode();
		resHttpStatus = status.value();
		resJsonData = JSON.parseObject(body);

		if (resHttpStatus != 200) {
			rtv = commitWingFailDB();
			if (rtv != 0)
				return rtv;
			return ERR_REST_COMMIT_NOT_200;
		}

		rtv = commitWingSuccDB();
		if (rtv != 0)
			return rtv;

		return 0;
	}

	private int runLoginDBProc(String eTradeFlow, String jsonData, int stat, String eInPostId, int httpStatus,
			int errorCode, String errorMessage) {
		try {
			String sql = "{call p_wing_get_token(?,?,?, ?,?, ?,?,?)}";
			logger.info("execute " + sql);
			int errorcode = (int) jdbcTemplate.execute(sql, new CallableStatementCallback() {
				@Override
				public Object doInCallableStatement(CallableStatement cs) throws SQLException, DataAccessException {
					cs.setString(1, eTradeFlow);
					cs.setString(2, jsonData);
					cs.setInt(3, stat);
					if (eInPostId == null) {
						cs.setNull(4, Types.VARCHAR);
					} else {
						cs.setString(4, eInPostId);
					}
					if (eInPostId == null) {
						cs.setNull(5, Types.NUMERIC);
					} else {
						cs.setInt(5, httpStatus);
					}

					logger.info(String.format("In Parameter : [%s], [%s], [%s], [%s], [%s]", eTradeFlow, jsonData, stat,
							eInPostId, httpStatus));

					cs.registerOutParameter(6, Types.VARCHAR);
					cs.registerOutParameter(7, Types.NUMERIC);
					cs.registerOutParameter(8, Types.VARCHAR);

					cs.execute();

					eOutPostId = cs.getString(6);
					int errorcode = cs.getInt(7);

					logger.info(String.format("Out Parameter : [%s], [%s], [%s]", cs.getString(6), cs.getString(7),
							cs.getString(8)));
					if (errorcode != 0) {
						logger.error(
								"execute procedure p_wing_get_token: " + errorcode + ",errorMsg:" + cs.getString(8));
					}
					return (errorcode == 0 ? 0 : ERR_PROC_LOGIN_DATA);
				}
			});
			return errorcode;
		} catch (DataAccessException e) {
			logger.error("execute procedure p_wing_get_token with oracle error: ", e);
			return ERR_PROC_LOGIN_ORACLE;
		}
	}

	private int runValidateDBProc(String eTradeFlow, String jsonData, int stat, String eInPostId, int httpStatus,
			int errorCode, String errorMessage) {
		try {
			String sql = "{call p_wing_validate(?,?,?, ?,?, ?,?,?)}";
			logger.info("execute " + sql);
			int errorcode = (int) jdbcTemplate.execute(sql, new CallableStatementCallback() {
				@Override
				public Object doInCallableStatement(CallableStatement cs) throws SQLException, DataAccessException {
					cs.setString(1, eTradeFlow);
					cs.setString(2, jsonData);
					cs.setInt(3, stat);
					if (eInPostId == null) {
						cs.setNull(4, Types.VARCHAR);
					} else {
						cs.setString(4, eInPostId);
					}
					if (eInPostId == null) {
						cs.setNull(5, Types.NUMERIC);
					} else {
						cs.setInt(5, httpStatus);
					}

					logger.info(String.format("In Parameter : [%s], [%s], [%s], [%s], [%s]", eTradeFlow, jsonData, stat, eInPostId, httpStatus));

					cs.registerOutParameter(6, Types.VARCHAR);
					cs.registerOutParameter(7, Types.NUMERIC);
					cs.registerOutParameter(8, Types.VARCHAR);

					cs.execute();

					eOutPostId = cs.getString(6);
					int errorcode = cs.getInt(7);

					logger.info(String.format("Out Parameter : [%s], [%s], [%s]", cs.getString(6), cs.getString(7),
							cs.getString(8)));
					if (errorcode != 0) {
						logger.error(
								"execute procedure p_wing_validate: " + errorcode + ",errorMsg:" + cs.getString(8));
					}
					return (errorcode == 0 ? 0 : ERR_PROC_VALIDATE_DATA);
				}
			});
			return errorcode;
		} catch (DataAccessException e) {
			logger.error("execute procedure p_wing_validate with oracle error: ", e);
			return ERR_PROC_VALIDATE_ORACLE;
		}
	}

	private int runCommitDBProc(String eTradeFlow, String jsonData, int stat, String eInPostId, int httpStatus,
			int errorCode, String errorMessage) {
		try {
			String sql = "{call p_wing_commit(?,?,?, ?,?, ?,?,?)}";
			logger.info("execute " + sql);
			int errorcode = (int) jdbcTemplate.execute(sql, new CallableStatementCallback() {
				@Override
				public Object doInCallableStatement(CallableStatement cs) throws SQLException, DataAccessException {
					cs.setString(1, eTradeFlow);
					cs.setString(2, jsonData);
					cs.setInt(3, stat);
					if (eInPostId == null) {
						cs.setNull(4, Types.VARCHAR);
					} else {
						cs.setString(4, eInPostId);
					}
					if (eInPostId == null) {
						cs.setNull(5, Types.NUMERIC);
					} else {
						cs.setInt(5, httpStatus);
					}

					logger.info(String.format("In Parameter : [%s], [%s], [%s], [%s], [%s]", eTradeFlow, jsonData, stat, eInPostId, httpStatus));

					cs.registerOutParameter(6, Types.VARCHAR);
					cs.registerOutParameter(7, Types.NUMERIC);
					cs.registerOutParameter(8, Types.VARCHAR);

					cs.execute();

					eOutPostId = cs.getString(6);
					int errorcode = cs.getInt(7);

					logger.info(String.format("Out Parameter : [%s], [%s], [%s]", cs.getString(6), cs.getString(7),
							cs.getString(8)));
					if (errorcode != 0) {
						logger.error(
								"execute procedure p_wing_validate: " + errorcode + ",errorMsg:" + cs.getString(8));
					}
					return (errorcode == 0 ? 0 : ERR_PROC_COMMIT_DATA);
				}
			});
			return errorcode;
		} catch (DataAccessException e) {
			logger.error("execute procedure p_wing_validate with oracle error: ", e);
			return ERR_PROC_COMMIT_ORACLE;
		}
	}

}
