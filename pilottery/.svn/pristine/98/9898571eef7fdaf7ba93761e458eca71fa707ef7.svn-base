package cls.pilottery.pos.system.service.impl;

import java.util.ArrayList;
import java.util.List;
import java.util.Map;

import org.apache.commons.lang3.StringUtils;
import org.apache.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;

import cls.pilottery.common.service.RedisService;
import cls.pilottery.common.utils.MD5Util;
import cls.pilottery.pos.common.annotation.PosMethod;
import cls.pilottery.pos.common.annotation.PosService;
import cls.pilottery.pos.common.model.BaseRequest;
import cls.pilottery.pos.common.model.BaseResponse;
import cls.pilottery.pos.system.model.bank.BankTopupRequest;
import cls.pilottery.pos.system.model.bank.BankTopupResponse;
import cls.pilottery.pos.system.model.bank.BankTypeResponse;
import cls.pilottery.pos.system.model.bank.BankWithdrawRequest;
import cls.pilottery.pos.system.model.bank.BankWithdrawResponse;
import cls.pilottery.pos.system.model.bank.OutletAccoutInfo;
import cls.pilottery.pos.system.service.BankService;
import cls.pilottery.web.outlet.model.FlowAgency;
import cls.pilottery.web.outlet.service.OutletService;

import com.alibaba.fastjson.JSONObject;

@PosService
public class BankServiceImpl implements BankService {

	public static Logger logger = Logger.getLogger(BankServiceImpl.class);

	@Autowired
	private OutletService outletService;
	private RedisService redisService;


	@Override
	@PosMethod(code = "030001")
	public BaseResponse getTopupType(Object reqParam) throws Exception {
		BaseResponse result = new BaseResponse();
		List<BankTypeResponse> list = new ArrayList<BankTypeResponse>();
		BankTypeResponse bt1 = new BankTypeResponse();
		bt1.setTypeCode(1);
		bt1.setTypeName("Cash");
		list.add(bt1);
		BankTypeResponse bt2 = new BankTypeResponse();
		bt2.setTypeCode(2);
		bt2.setTypeName("Wing");
		list.add(bt2);
		BankTypeResponse bt3 = new BankTypeResponse();
		bt3.setTypeCode(3);
		bt3.setTypeName("Emoney");
		list.add(bt3);
		result.setResult(list);
		return result;
	}

	@Override
	@PosMethod(code = "030002")
	public BaseResponse getOutletBankAccInfo(Object reqParam) throws Exception {
		BaseRequest request = (BaseRequest)reqParam;
		BaseResponse result = new BaseResponse();
		Map req = JSONObject.parseObject(request.getParam().toString(), Map.class);
		String outletCode = (String)req.get("outletCode");
		int accType = (Integer) req.get("typeCode");
		
		//WareHouseInfo info = basicDataManageDao.getWareHouseInfo(whManager);
		List<OutletAccoutInfo> infos = new ArrayList<OutletAccoutInfo>();
		OutletAccoutInfo  a1 = new OutletAccoutInfo();
		a1.setAccountID("AC0000001");
		a1.setAccountOwner("first-acc");
		infos.add(a1);
		a1 = new OutletAccoutInfo();
		a1.setAccountID("AC0000002");
		a1.setAccountOwner("second-acc");
		infos.add(a1);
		result.setResult(infos);		
		return result;
	}

	
	@Override
	@PosMethod(code = "030003")
	public BaseResponse bankTopUp(Object reqParam) throws Exception {
		BaseRequest bq = (BaseRequest) reqParam;
		BaseResponse response = new BaseResponse();

		if (bq == null) {
			response.setErrcode(10012);
			logger.info("请求参数不合法或为空!");
			return response;
		}

		BankTopupRequest rqparam = new BankTopupRequest();
		rqparam = JSONObject.parseObject(bq.getParam().toString(),
				BankTopupRequest.class);
		
		//验证状态
		/*DetailsForm dd=	outletService.getByCode(rqparam.getOutleteCode());
	    if(dd == null || dd.getStatus() != 1)
	    {
	    	response.setErrcode(10020);
	    	logger.info("提现失败：站点状态不正确或站点不存在！");
			return response;
	    }*/
			    
		//UserToken ut = (UserToken) redisService.getObject(bq.getToken());

		FlowAgency flow = new FlowAgency();
		flow.setAgencyCode(rqparam.getOutleteCode());
		flow.setPassword(MD5Util.MD5Encode(rqparam.getTransPassword()));
		//flow.setAdminId(Integer.parseInt(ut.getId().toString()));
		flow.setAmount(rqparam.getAmount());

		// 构造返回信息
		/*outletService.forOutletPopup(flow);
		logger.debug("p_outlet_topup执行完毕");
		logger.debug("Error Code:" + flow.getC_errcode());
		logger.debug("Error Message:" + flow.getC_errmsg());
		if (flow.getC_errcode() != 0) {
			response.setErrcode(1);
			response.setErrmesg(flow.getC_errmsg());
			return response;
		}*/

		BankTopupResponse info = new BankTopupResponse();
		info.setBalance(flow.getAfterAmount());
		info.setOutletCode(flow.getAgencyCode());
		//info.setOutletFlow(flow.getAgencyFundFlow());
		info.setOutletName("Outlet Name");
		info.setTopupAmount(flow.getAmount());
		response.setResult(info);

		return response;
	}

	@Override
	@PosMethod(code = "030004")
	public BaseResponse bankWithdraw(Object reqParam) throws Exception {
		BaseRequest request = (BaseRequest)reqParam;
		BaseResponse response = new BaseResponse();
		
		BankWithdrawRequest req = JSONObject.parseObject(request.getParam().toString(), BankWithdrawRequest.class);
		 if(req == null || StringUtils.isEmpty(req.getAccountID()) || StringUtils.isEmpty(req.getOutletCode()) || req.getAmount() < 1 ){
			 response.setErrcode(10012);
			 return response;
		 }
		 BankWithdrawResponse result = new BankWithdrawResponse();
		 result.setWithdrawCode("test0000001");
		 response.setResult(result);
		return response;
	}
	
	
}
