<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="cls.pilottery.oms.monitor.dao.MGameIssueDao">

	<resultMap type="cls.pilottery.oms.monitor.model.GameIssue" id="gameIssueResult">
		<id column="GAME_CODE" property="gameCode" />
		<id column="ISSUE_NUMBER" property="issueNumber" />
		<result column="ISSUE_SEQ" property="issueSeq" />
		<result column="ISSUE_STATUS" property="issueStatus" />
		<result column="IS_PUBLISH" property="isPublish" />
		<result column="DRAW_STATE" property="drawState" />
		<result column="REAL_START_TIME" property="realStartTime" />
		<result column="REAL_REWARD_TIME" property="realRewardTime" />
		<result column="REAL_CLOSE_TIME" property="realCloseTime" />
		<result column="ISSUE_END_TIME" property="issueEndTime" />
		<result column="FIRST_DRAW_USER_ID" property="firstDrawUser" />
		<result column="SECOND_DRAW_USER_ID" property="secondDrawUser" />
		<result column="FINAL_DRAW_NUMBER" property="finalDrawNumber" />
		<result column="FINAL_DRAW_USER_ID" property="finalDrawUserId" />
		<result column="POOL_START_AMOUNT" property="poolStartAmount" />
		<result column="POOL_CLOSE_AMOUNT" property="poolCloseAmount" />
		<result column="WINNING_AMOUNT" property="winningAmount" />
		<result column="ISSUE_SALE_AMOUNT" property="issueSaleAmount" />
		<result column="ISSUE_SALE_TICKETS" property="issueSaleTickets" />
		<result column="ISSUE_CANCEL_AMOUNT" property="issueCancelAmount" />
		<result column="ISSUE_CANCEL_TICKETS" property="issueCancelTickets" />
		<result column="ISSUE_RICK_TICKETS" property="issueRickTickets" />
		<result column="ISSUE_RICK_AMOUNT" property="issueRickAmount" />
		<result column="WINNING_RESULT" property="winningResult" />
		<result column="IS_OPEN_RISK" property="isOpenRisk" />
	</resultMap>
	
	<resultMap type="cls.pilottery.oms.monitor.model.GameIssueDetail" id="gameIssueDetail">
		<id column="ISSUE_NUMBER" property="issueNumber" />
		<id column="GAME_CODE" property="gameCode" />
		<result column="XML_CONTENT" property="xmlContent"/>
	</resultMap>
	
	<select id="listCount" parameterType="cls.pilottery.oms.monitor.model.GameIssue" resultType="int">
  		select count(n.GAME_CODE) from ISS_GAME_ISSUE n where ISSUE_STATUS !=0 AND   n.GAME_CODE = ${gameCode}
    </select>
    
    <select id="listGameIssue" resultMap="gameIssueResult"
		parameterType="cls.pilottery.oms.monitor.model.GameIssue">
		select *
		from (select tab.*, rownum rn
		from (select * from ISS_GAME_ISSUE m
		WHERE ISSUE_STATUS !=0 AND m.GAME_CODE = ${gameCode}
		 order by m.issue_number desc
		<![CDATA[ ) TAB ) where rn > ${beginNum} and rn <= ${endNum} ]]>
	</select>

     <select id="findGameIssueByCode" parameterType="map" resultMap="gameIssueResult"> 
			SELECT A.ISSUE_SEQ            as issueSeq,
			       A.ISSUE_STATUS         as issueStatus,
			       A.IS_PUBLISH           as isPublish,
			       A.DRAW_STATE           as drawState,
			       A.REAL_START_TIME      as realStartTime,
			       A.REAL_CLOSE_TIME      as realCloseTime,
			       A.REAL_REWARD_TIME     as realRewardTime,
			       A.ISSUE_END_TIME       as issueEndTime,
			       A.FINAL_DRAW_NUMBER    as finalDrawNumber,
			       A.FINAL_DRAW_USER_ID   as finalDrawUserId,
			       A.POOL_START_AMOUNT    as poolStartAmount,
			       A.POOL_CLOSE_AMOUNT    as poolCloseAmount,
			       A.ISSUE_SALE_AMOUNT    as issueSaleAmount,
			       A.ISSUE_SALE_TICKETS   as issueSaleTickets,
			       A.ISSUE_CANCEL_AMOUNT  as issueCancelAmount,
			       A.ISSUE_CANCEL_TICKETS as issueCancelTickets,
			       A.WINNING_AMOUNT       as winningAmount,
			       A.WINNING_RESULT       as winningResult,
			       b.admin_realname       AS firstUserName,
			       c.admin_realname       AS secondUserName,
			       e.IS_OPEN_RISK         as isOpenRisk,
			       a.ISSUE_RICK_AMOUNT issueRickAmount, 
			       a.ISSUE_RICK_TICKETS issueRickTickets
			  FROM ISS_GAME_ISSUE a
			  LEFT JOIN adm_info b
			    ON a.first_draw_user_id = b.admin_id
			  LEFT JOIN adm_info c
			    ON a.second_draw_user_id = c.admin_id
			  JOIN ISS_CURRENT_PARAM d
			    ON (a.GAME_CODE = d.game_code AND a.ISSUE_NUMBER = d.issue_number)
			  JOIN GP_HISTORY e
			    ON D.HIS_HIS_CODE = E.HIS_HIS_CODE
			   AND D.GAME_CODE = E.GAME_CODE
				where a.ISSUE_NUMBER = #{issueNumber} and a.GAME_CODE = ${gameCode}
    </select> 
	
	<select id="queryGameIssueDetail" parameterType="cls.pilottery.oms.monitor.model.GameIssueDetail" resultMap="gameIssueDetail">
		 SELECT * FROM  ISS_GAME_ISSUE_MODULE where 1=1 
		<!-- SELECT * FROM  iss_game_issue_xml where 1=1 -->
		<if test="issueNumber!=0">
			AND ISSUE_NUMBER = #{issueNumber}
		</if>
		<if test="gameCode!=0">
			AND GAME_CODE = #{gameCode}
		</if>
	</select>
	
	 <select id="getPriceList" resultType="cls.pilottery.oms.monitor.model.xmlEntity.Prize"
		parameterType="cls.pilottery.oms.monitor.model.GameIssueDetail">
			with t as
			 (select  prize_level ,
			          sum(winningamounttax) as prize_amount,
			          sum(prize_count)      as prize_num
			    from HIS_WIN_TICKET_DETAIL
			   where game_code = #{gameCode}
			     and issue_number = #{issueNumber}
			group by prize_level),
			i as
			 (select prize_level, prize_name
			    from iss_prize
			   where game_code = #{gameCode}
			     and issue_number = #{issueNumber}
			   )
			select i.prize_name,
			       t.prize_num,
			       t.prize_amount
			  from t
			  join i
			    on t.prize_level = i.prize_level
			    order by i.prize_name asc	
	</select>
	
	<select id="getHighPriceList" resultType="cls.pilottery.oms.monitor.model.xmlEntity.Location" 
	parameterType="cls.pilottery.oms.monitor.model.GameIssueDetail">
		with prize as
		 (select PRIZE_LEVEL, PRIZE_NAME
		    from iss_prize
		   where game_code = #{gameCode}
		     and issue_number = #{issueNumber}
		     and is_hd_prize = 1
		     and prize_count > 0),
		base as
		 (select distinct sale_agency agency_code,
		                  PRIZE_LEVEL,
		                  sum(PRIZE_COUNT) over(partition by sale_agency, PRIZE_LEVEL) as level_count,
		                  sum(PRIZE_COUNT) over(partition by PRIZE_LEVEL) as all_count
		    from his_win_ticket_detail
		   where game_code = #{gameCode}
		     and issue_number = #{issueNumber}
		     and PRIZE_LEVEL in (select PRIZE_LEVEL from prize))
		select PRIZE_LEVEL as prize_level,
		       PRIZE_NAME as prize_name,
		       agency_code,
		       level_count as total_win,
		       agency_name,
		       ADDRESS as agency_addr,
		       all_count as count
		  from base
		  join inf_agencys
		 using (agency_code)
		  join prize
		 using (PRIZE_LEVEL)	
	</select>
	
</mapper>

